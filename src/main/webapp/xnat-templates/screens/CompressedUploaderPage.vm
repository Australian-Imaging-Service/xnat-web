#set($uploadName = "upload$!uploadID")
#set($usrResPath = "/user/cache/resources/$!uploadName/files/$!{uploadName}.zip")
#set($uploaderUrl = $content.getURI("/data$!usrResPath?XNAT_CSRF=$!XNAT_CSRF"))
#set($archiverUrl = $content.getURI("/data/services/import?format=html&XNAT_CSRF=$!XNAT_CSRF"))

<script type="text/javascript">
    function disableForm(theform) {
        if (document.all || document.getElementById) {
            for (i = 0; i < theform.length; i++) {
                var tempobj = theform.elements[i];
                tempobj.disabled = true;
            }
            return true;
        }
        else {
            return true;
        }
    }

    var i;
    var req;
    var progInterval;

    var extractCount = 0;
    var uploadID = "$uploadID";
    var started = 0;
    var extractTimeOut = 300;
    var usrResPath ="$!usrResPath";
    var uploaderUrl = "$!uploaderUrl";
    var archiverUrl = "$!archiverUrl";
    var destArchive = false;
    var prearchiveLinkString = '<a target="_blank" href="$content.getURI("/app/template/XDATScreen_prearchives.vm")">prearchive</a>';
    var extractSummary = XNAT.ui.dialog.init({
        title: 'Extraction/review summary',
        id: 'extraction-summary',
        content: spawn('div#summaryContents'),
        destroyOnClose: false,
        protected: true,
        buttons: [
            {
                label: 'Close',
                isDefault: true,
                close: true
            }
        ]
    });

    function setExtractSummary(msg, jsonobj) {
        var messages = "";
        try {
            var respPos = jsonobj.msgs[0].length - 1;
            for (i = 0; i <= respPos; i++) {
                var level = jsonobj.msgs[0][i].status;
                var message = jsonobj.msgs[0][i].msg;
                message = message.charAt(0).toUpperCase() + message.substr(1);
                if (level == "COMPLETED") {
                    // Hack to indicate processing done
                    if (message.startsWith("XXX")) {
                        $("#extractStep").html('<span class="text-success">Complete:</span>');
                        $("#extractPercent").text('FINISHED');
                        $('#extractBar').css('width','100%')
                                .css('color', 'white')
                                .css('background-color', '#339933');
                        // stop polling
                        checkProgressFinal = 1;

                        var dest = message.replace(/^XXX/, '').replace(/:.*/,'');
                        var urls = message.replace(/^XXX.*:/, '').split(';');
                        var urlsHtml;
                        if (destArchive) {
                            urlsHtml = $.map(urls, function(url) {
                                var id = url.replace(/.*\//, '');
                                return '<a target="_blank" href="/data' + url + '">' + id + '</a>'
                            }).join(', ');
                        } else {
                            urlsHtml = 'Visit the ' + prearchiveLinkString + ' to review it/them.';
                        }

                        msg = urls.length + ' session(s) successfully uploaded to ' + dest;
                        message = msg + ': ' + urlsHtml;

                        $("#overallSummaryContent").html(urlsHtml);
                        $("#overallSummary").show();
                    }
                    message = '<div class="prog success">' + message + '</div>';
                } else if (level == "PROCESSING") {
                    message = '<div class="prog info">' + message + '</div>';
                } else if (level == "WARNING") {
                    message = '<div class="prog warning">' + message + '</div>';
                } else if (level == "FAILED") {
                    // Hack to indicate processing done
                    if (message.startsWith("XXX")) {
                        $("#extractStep").html('<span class="text-error">FAILURE:</span>');
                        $("#extractPercent").text('FAILED');
                        $('#extractBar').css('width','100%')
                                .css('color', 'white')
                                .css('background-color', '#993333');
                        // stop polling
                        checkProgressFinal = 1;

                        msg = 'Extraction/Review failed.'
                        if (destArchive) {
                            $("#ex").append('<br/><div class="warning">Check the ' + prearchiveLinkString +
                                    ', your data may be available there for manual review.</div>');
                        }

                        message = message.replace(/^XXX/,'');
                    }
                    message = '<div class="prog error">' + message + '</div>';
                } else {
                    message = '<div class="prog info">' + message + '</div>';
                }
                messages += message;
            }
        } catch (e) {
        }
        $("#summaryContents").html(messages);
        if (msg) {
            $("a#stepSummary").text(msg.charAt(0).toUpperCase() + msg.substr(1));
            $("#currentStep").show();
        }
    }

    $(document).on('click', 'a#stepSummary', function() {
        extractSummary.show();
    });

    function setExtractProgress(i) {
        if (i == 0) {
            document.getElementById("extractPercent").innerHTML = "";
            document.getElementById("extractBar").style.width = 0 + "px";
        } else {
            if (i <= 100) {
                var pixels = i * 3;
                if (i > 10) {
                    document.getElementById("extractPercent").innerHTML = parseInt(i) + "%";
                }
                document.getElementById("extractBar").style.width = pixels + "px";
            }
        }
    }

    function evaluateDestination(ele) {
        if (ele.value == '2') {
            destArchive = true;
            document.getElementById("auto-archive").value = 'true';
            document.getElementById("quarantine").value = 'true';
        } else if (ele.value == '1') {
            destArchive = true;
            document.getElementById("auto-archive").value = 'true';
            document.getElementById("quarantine").value = 'false';
        } else if (ele.value == '0') {
            destArchive = false;
            document.getElementById("auto-archive").value = 'false';
            document.getElementById("quarantine").value = 'false';
        }
    }

    var checkProgressFinal = 0;

    function validateForm(theform) {
        var imageArchive = document.getElementById("image_archive");
        if (!imageArchive.value) {
            xmodal.message('Upload Action', 'Please select an archive to upload.');
            return false;
        }
        if (!(imageArchive.value.endsWith(".gz") || imageArchive.value.endsWith(".tgz") || imageArchive.value.endsWith(".zip"))) {
            xmodal.message('Upload Action', 'Please select a tar or zip archive to upload.');
            return false;
        }
        if (document.getElementById("project").selectedIndex == 0) {
            xmodal.message('Upload Action', 'Please select a $displayManager.getSingularDisplayNameForProject().toLowerCase().');
            return false;
        }
        return true;
    }

    function callback() {
        if (req.readyState == 4) {
            if (req.status == 200) {
                started = 1;
                // handle response
                var respDat = YAHOO.lang.JSON.parse(req.responseText);
                var respPos = respDat.msgs[0].length - 1;
                var extractI = 0;
                if (respDat.msgs[0].length > 0) {
                    if (respDat.msgs[0].length > 0) {
                        var level = respDat.msgs[0][respPos].status;
                        var message = respDat.msgs[0][respPos].msg;
                    }
                }

                setExtractSummary(message, respDat);
                if (checkProgressFinal === 1) {
                    return;
                }

                //extract in progress
                if (extractCount != 98) {
                    extractCount = extractCount + 1;
                }
                if (extractCount < 10) {
                    extractTimeOut = 500;
                }
                if (extractCount > 10) {
                    extractTimeOut = 100;
                }
                if (extractCount > 20) {
                    extractTimeOut = 1500;
                }
                if (extractCount > 30) {
                    extractTimeOut = 2000;
                }
                if (extractCount > 50) {
                    extractTimeOut = 2800;
                }
                if (extractCount > 60) {
                    extractTimeOut = 3300;
                }
                if (extractCount > 70) {
                    extractTimeOut = 4000;
                }
                if (extractCount > 80) {
                    extractTimeOut = 5000;
                }
                if (extractCount > 85) {
                    extractTimeOut = 6000;
                }
                if (extractCount > 88) {
                    extractTimeOut = 9000;
                }
                setExtractProgress(extractCount);
                setTimeout("checkProgress();", extractTimeOut);
            }
        }
    }

    function resetProgress() {
        var url = "$content.getURI("servlet/AjaxServlet")?remote-class=org.nrg.xnat.ajax.UploadProgress";
        url = url + "&remote-method=start";
        url = url + "&ID=" + uploadID;
        if (window.XMLHttpRequest) {
            req = new XMLHttpRequest();
        } else if (window.ActiveXObject) {
            req = new ActiveXObject("Microsoft.XMLHTTP");
        }
        req.open("GET", url, true);
        req.send(null);
    }

    function checkProgress() {
        var url = "$content.getURI("/REST/status/$uploadID")?format=json&stamp=" + (new Date()).getTime();
        if (window.XMLHttpRequest) {
            req = new XMLHttpRequest();
        } else if (window.ActiveXObject) {
            req = new ActiveXObject("Microsoft.XMLHTTP");
        }
        req.open("GET", url, true);
        req.onreadystatechange = callback;
        req.send(null);
    }

    var current_progress = 0;
    var step = 0.15;
    function fakeProgress(progress) {
        if (!progress) {
            current_progress += step;
            progress = Math.round(Math.atan(current_progress) / (Math.PI / 2) * 100 * 1000) / 1000;

            if (progress >= 70) {
                step = 0.01;
            } else {
                progress = Math.round(progress);
                if (progress >= 50) {
                    step = 0.05;
                } else if (progress >= 30) {
                    step = 0.1;
                }
            }
        }

        $(".pull-progress-bar")
                .css("width", progress + "%")
                .text(progress + "%");
    }

    function errorHandler(e, base){
        var info = e.responseText ? base + ': ' + e.responseText : base;
        var details = spawn('p',[info]);
        console.log(e);
        xmodal.alert({
            title: 'Error',
            content: '<p><strong>Error ' + e.status + ': '+ e.statusText+'</strong></p>' + details.html,
            okAction: function () {
                xmodal.closeAll();
            }
        });
    }

    function makeTheFormGo() {
        var form = document.getElementById("uploadFORM");
        validateForm(form);
        //form.submit();

        // Upload file, then archive it asynchronously
        var formDataUpload = new FormData();
        formDataUpload.append("image_archive", $('#image_archive').prop('files')[0]);
        var formDataArchive = new FormData(form);
        formDataArchive.delete("image_archive");
        formDataArchive.append("src", usrResPath);
        formDataArchive.append("http-session-listener", uploadID);

        disableForm(form);

        var loading;
        $.ajax({
            method: 'PUT',
            contentType: false,
            url: uploaderUrl,
            data: formDataUpload,
            processData: false,
            cache: false,
            beforeSend: function() {
                loading = XNAT.ui.dialog.static.wait("Uploading file...", {
                    width: 300,
                    header: false,
                    footer: false,
                    mask: true,
                    padding: '0',
                    top: '80px',
                    classes: 'static',
                    content: spawn('div.message.md', [
                        'Uploading file...',
                        spawn('div.clearfix', [
                            spawn('div', {classes: 'pull-progress-div'}, spawn('div', {classes: 'pull-progress-bar'}, '0%'))
                        ])
                    ])
                });
                progInterval = setInterval(fakeProgress, 1000);
            },
            success: function() {
                clearInterval(progInterval);
                fakeProgress(100);
                $.ajax({
                    method: 'POST',
                    contentType: false,
                    url: archiverUrl,
                    data: formDataArchive,
                    processData: false,
                    cache: false,
                    success: function() {
                        if (document.getElementById) {
                            document.getElementById('progressBar').style.display = 'block';
                        }
                        else if (document.all) {
                            document.all['progressBar'].style.display = 'block';
                        }
                        started = 0;
                        checkProgressFinal = 0;
                        setExtractProgress(0);
                        resetProgress();
                        checkProgress();
                    },
                    error: function(xhr) {
                        errorHandler(xhr, 'Issue requesting [pre]archival of your data');
                    }
                });
                loading.close();
            },
            error: function(xhr) {
                clearInterval(progInterval);
                loading.close();
                errorHandler(xhr, 'Issue uploading your data');
            }
        });
    }
</script>

#if(!$sectionTitle)
    #set($sectionTitle = "<h2>XNAT Compressed Uploader</h2>")
#end
#if($session)
    #set($quarantineMsg=" and specify whether the resulting session should go into a quarantine state")
#end

<div style="width: 500px">
    $sectionTitle

    <p>Upload zipped (.zip or .tar.gz) DICOM or ECAT image files to a specified project.</p>
    <p>Selecting 'Prearchive' will place your images into a
        <a target="_blank" href="$content.getURI("/app/template/XDATScreen_prearchives.vm")">temporary holding space</a>,
        which allows you to review the details and match the data to the proper
        $displayManager.getSingularDisplayNameForSubject().toLowerCase() &amp;
        $displayManager.getSingularDisplayNameForImageSession().toLowerCase(). If you are confident the metadata will
        map properly, you may directly 'Archive' the files$!quarantineMsg.
    </p>
    <form id="uploadFORM" class="noHide" enctype="multipart/form-data" method="POST"
          action="">
        <input type="hidden" name="threshhold" value="51516279"/>

        #if($session)
            <input type="hidden" name="EXPT_LABEL" value="$!session.getLabel()"/>
            <input type="hidden" name="SUBJECT_ID" value="$!session.getSubjectData().getLabel()"/>
        #end

        <table border=0 cellpadding="5" cellspacing="0">
            <tr>
                <th align="left">$displayManager.getSingularDisplayNameForProject()</th>
                <td>
                    #if(!$!session)
                        <select id="project" name="project" disabled="true"></select>
                    #else
                        <input type="hidden" name="project" id="project"
                               value="$session.getProject()"/>$session.getProject()
                    #end
                </td>
            </tr>

            #if($!session)
                <tr>
                    <th align="left">$displayManager.getSingularDisplayNameForImageSession()</th>
                    <td>$!session.getLabel()</td>
                </tr>
            #end
            <tr>
                <th align="left">Destination</th>
                <td>
                    <label><input id="pc_0" type='radio' name='prearchive_code' value='0'
                                  #if(!$session)CHECKED#end onchange="evaluateDestination(this)"/>
                        Prearchive</label>&nbsp;&nbsp;&nbsp;
                    <label><input id="pc_2" type='radio' name='prearchive_code' value='1'
                                  #if($session)CHECKED#end onchange="evaluateDestination(this)"/>
                        Archive</label>
                    #if($session)
                        <input type="hidden" name="overwrite" value="append"/>
                        <input type="hidden" id="auto-archive" name='auto-archive' value='TRUE'/>
                    #else
                        <input type="hidden" id="auto-archive" name='auto-archive' value='FALSE'/>
                    #end
                    <input type="hidden" id="quarantine" name='quarantine' value='FALSE'/>
                </td>
            </tr>
            <tr>
                <th align="left">File</th>
                <td><input type="file" id="image_archive" name="image_archive" size="60"
                           accept="application/zip, application/x-gzip, application/x-tgz"/></td>
            </tr>
            #auditBoxes("3" "" "Standard Upload" "Upload Images")
            #hideFormJustification()
            <tr>
                <td>&nbsp;</td>
                <td><input id="directButton" type="button" name="eventSubmit_doPerform" value="Begin Upload" onclick="makeTheFormGo();"/>
                </td>
            </tr>
        </table>
    </form>

    <span id="progressBar" style="position:relative; display:none;">
        <div id="ex" style="position: relative; display: block; margin-top:10px;">
            <table width="100%">
                <tr>
                    <td>
                        <div id="extractLabel">Extract/Review:&nbsp;</div>
                    </td>
                    <td>
                        <div id="emptyExtract"
                             style="background-color:#cccccc;border:1px solid black;height:22px;width:300px;padding:0;"
                             align="left">
                            <div id="extractBar"
                                 style="position:relative;top:0;left:0;background-color:#333333;height:22px;width:0;padding-top:5px;padding:0;">
                                <div id="extractPercent"
                                     style="position:relative;top:0;left:0;color:#f0ffff;height:22px;text-align:center;font:bold;padding:0;padding-top:5px;">
                                </div>
                            </div>
                        </div>
                    </td>
                </tr>
                <tr id="currentStep" style="display: none">
                    <td>
                        <div id="extractStep">Step:</div>
                    </td>
                    <td>
                         <a id="stepSummary"></a>
                    </td>
                </tr>
                <tr id="overallSummary" style="display: none">
                    <td>
                        <div id="extractResult">Result:</div>
                    </td>
                    <td id="overallSummaryContent">
                    </td>
                </tr>
            </table>
        </div>
    </span>

    <script type="text/javascript">
        // Adapted from Sun Java Web Start Auto-Install Demo
        // http://java.sun.com/developer/technicalArticles/JavaLP/javawebstart/AutoInstallDemo.html
        var detect = navigator.userAgent.toLowerCase();
        var windowsIE = (checkPlatform("msie") && checkPlatform("win"));

        function checkPlatform(string) {
            place = detect.indexOf(string) + 1;
            thestring = string;
            return place;
        }
    </script>
</div>

<style>

    @-webkit-keyframes progress-bar-stripes {
        0% {
            background-position: 0 0;
        }
        100% {
            background-position: 30px 0;
        }
    }
    @-moz-keyframes progress-bar-stripes {
        0% {
            background-position: 0 0;
        }
        100% {
            background-position: 30px 0;
        }
    }
    @-ms-keyframes progress-bar-stripes {
        0% {
            background-position: 0 0;
        }
        100% {
            background-position: 30px 0;
        }
    }
    @-o-keyframes progress-bar-stripes {
        0% {
            background-position: 0 0;
        }
        100% {
            background-position: 30px 0;
        }
    }
    @keyframes progress-bar-stripes {
        0% {
            background-position: 0 0;
        }
        100% {
            background-position: 30px 0;
        }
    }

    .pull-progress-div {
        float: left;
        width: 100%;
        height: 100%;
        font-size: 12px;
        line-height: 20px;
        text-align: center;
        color: #f0f0f0;
        background-color: #f0f0f0;
        -webkit-box-shadow: inset 0 1px 0 rgba(0,0,0,.15);
        box-shadow: inset 0 1px 0 rgba(0,0,0,.15);
        border-radius: 5px;
        margin-top: 5px;
    }

    .pull-progress-bar {
        text-align: center;
        color: #f0f0f0;
        width: 0;
        height: 100%;
        border-radius: 5px;
        -webkit-box-shadow: inset 0 1px 0 rgba(0,0,0,.15);
        box-shadow: inset 0 1px 0 rgba(0,0,0,.15);
        background-color: #2d69b8;
        background-image: linear-gradient(45deg, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%,
        rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
        background-size: 1rem 1rem;
        -webkit-animation: progress-bar-stripes 1s linear infinite;
        -o-animation: progress-bar-stripes 1s linear infinite;
        animation: progress-bar-stripes 1s linear infinite;
        -webkit-transition: width .6s ease;
        -o-transition: width .6s ease;
        transition: width .6s ease;
    }

    .prog {
        margin-bottom: 3px;
    }
</style>

#if(!$!session)
<script type="text/javascript" src="$content.getURI('scripts/subjectAssessorData/proj_tools.js')"></script>

<script type="text/javascript">
    //load projects
    window.defaultProject = "$!project";

    window.projectLoader = new ProjectLoader();

    window.projectLoader.onLoadComplete.subscribe(function () {
        renderProjects(document.getElementById("project"), window.projectLoader.list, window.defaultProject);
    });

    document.getElementById("project").onchange = function (o) {
        if (this.selectedIndex > 0) {
            var s = this.options[this.selectedIndex];
            var pc = document.getElementById("pc_0");
            if (pc != undefined && pc != null) {
                if (s.pc == "4") {
                    if (s.qc == "0") {
                        document.getElementById("pc_2").click();
                    } else {
                        document.getElementById("pc_1").click();
                    }
                } else {
                    document.getElementById("pc_0").click();
                }
            }
        }
    };

    window.projectLoader.init();

    //build breadcrumb
    var breadcrumbs = document.getElementById('breadcrumbs');

    if (breadcrumbs != null) {
        var bread = "";
        #if($project)
            bread = bread + "<a href='$link.setAction("DisplayItemAction").addPathInfo("search_element","xnat:projectData").addPathInfo("search_field","xnat:projectData.ID").addPathInfo("search_value","$project")'>$displayManager.getSingularDisplayNameForProject().toUpperCase(): $!project</a>";
            bread = bread + "&nbsp;>&nbsp;Upload Images";
        #end
        breadcrumbs.innerHTML = bread;
    }
</script>
#end
